package provider

// RESOURCE NORMAL
import (
	"context"

	merakigosdk "github.com/meraki/dashboard-api-go/v3/sdk"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/setplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

var (
	_ resource.Resource              = &NetworksApplianceSecurityMalwareResource{}
	_ resource.ResourceWithConfigure = &NetworksApplianceSecurityMalwareResource{}
)

func NewNetworksApplianceSecurityMalwareResource() resource.Resource {
	return &NetworksApplianceSecurityMalwareResource{}
}

type NetworksApplianceSecurityMalwareResource struct {
	client *merakigosdk.Client
}

func (r *NetworksApplianceSecurityMalwareResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}
	client := req.ProviderData.(MerakiProviderData).Client
	r.client = client
}

// Metadata returns the data source type name.
func (r *NetworksApplianceSecurityMalwareResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_networks_appliance_security_malware"
}

func (r *NetworksApplianceSecurityMalwareResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Attributes: map[string]schema.Attribute{
			"allowed_files": schema.SetNestedAttribute{
				MarkdownDescription: `Sha256 digests of files permitted by the malware detection engine`,
				Computed:            true,
				Optional:            true,
				PlanModifiers: []planmodifier.Set{
					setplanmodifier.UseStateForUnknown(),
				},
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{

						"comment": schema.StringAttribute{
							MarkdownDescription: `Comment about the allowed file`,
							Computed:            true,
							Optional:            true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
							},
						},
						"sha256": schema.StringAttribute{
							MarkdownDescription: `The sha256 digest of allowed file`,
							Computed:            true,
							Optional:            true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
							},
						},
					},
				},
			},
			"allowed_urls": schema.SetNestedAttribute{
				MarkdownDescription: `URLs permitted by the malware detection engine`,
				Computed:            true,
				Optional:            true,
				PlanModifiers: []planmodifier.Set{
					setplanmodifier.UseStateForUnknown(),
				},
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{

						"comment": schema.StringAttribute{
							MarkdownDescription: `Comment about the allowed URL`,
							Computed:            true,
							Optional:            true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
							},
						},
						"url": schema.StringAttribute{
							MarkdownDescription: `The allowed URL`,
							Computed:            true,
							Optional:            true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
							},
						},
					},
				},
			},
			"mode": schema.StringAttribute{
				MarkdownDescription: `Current status of malware prevention`,
				Computed:            true,
				Optional:            true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.OneOf(
						"disabled",
						"enabled",
					),
				},
			},
			"network_id": schema.StringAttribute{
				MarkdownDescription: `networkId path parameter. Network ID`,
				Required:            true,
			},
		},
	}
}

func (r *NetworksApplianceSecurityMalwareResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	// Retrieve values from plan
	var data NetworksApplianceSecurityMalwareRs

	var item types.Object
	resp.Diagnostics.Append(req.Plan.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}
	//Has Paths
	vvNetworkID := data.NetworkID.ValueString()
	//Item
	responseVerifyItem, restyResp1, err := r.client.Appliance.GetNetworkApplianceSecurityMalware(vvNetworkID)
	if err != nil || restyResp1 == nil || responseVerifyItem == nil {
		resp.Diagnostics.AddError(
			"Resource NetworksApplianceSecurityMalware only have update context, not create.",
			err.Error(),
		)
		return
	}
	//Only Item
	if responseVerifyItem == nil {
		resp.Diagnostics.AddError(
			"Resource NetworksApplianceSecurityMalware only have update context, not create.",
			err.Error(),
		)
		return
	}
	dataRequest := data.toSdkApiRequestUpdate(ctx)
	response, restyResp2, err := r.client.Appliance.UpdateNetworkApplianceSecurityMalware(vvNetworkID, dataRequest)

	if err != nil || restyResp2 == nil || response == nil {
		if restyResp1 != nil {
			resp.Diagnostics.AddError(
				"Failure when executing UpdateNetworkApplianceSecurityMalware",
				err.Error(),
			)
			return
		}
		resp.Diagnostics.AddError(
			"Failure when executing UpdateNetworkApplianceSecurityMalware",
			err.Error(),
		)
		return
	}
	//Item
	responseGet, restyResp1, err := r.client.Appliance.GetNetworkApplianceSecurityMalware(vvNetworkID)
	// Has item and not has items
	if err != nil || responseGet == nil {
		if restyResp1 != nil {
			resp.Diagnostics.AddError(
				"Failure when executing GetNetworkApplianceSecurityMalware",
				err.Error(),
			)
			return
		}
		resp.Diagnostics.AddError(
			"Failure when executing GetNetworkApplianceSecurityMalware",
			err.Error(),
		)
		return
	}
	//entro aqui 2
	data = ResponseApplianceGetNetworkApplianceSecurityMalwareItemToBodyRs(data, responseGet, false)

	diags := resp.State.Set(ctx, &data)
	resp.Diagnostics.Append(diags...)
}

func (r *NetworksApplianceSecurityMalwareResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data NetworksApplianceSecurityMalwareRs

	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}
	//Has Paths
	// Has Item2

	vvNetworkID := data.NetworkID.ValueString()
	responseGet, restyRespGet, err := r.client.Appliance.GetNetworkApplianceSecurityMalware(vvNetworkID)
	if err != nil || restyRespGet == nil {
		if restyRespGet != nil {
			if restyRespGet.StatusCode() == 404 {
				resp.Diagnostics.AddWarning(
					"Resource not found",
					"Deleting resource",
				)
				resp.State.RemoveResource(ctx)
				return
			}
			resp.Diagnostics.AddError(
				"Failure when executing GetNetworkApplianceSecurityMalware",
				err.Error(),
			)
			return
		}
		resp.Diagnostics.AddError(
			"Failure when executing GetNetworkApplianceSecurityMalware",
			err.Error(),
		)
		return
	}
	//entro aqui 2
	data = ResponseApplianceGetNetworkApplianceSecurityMalwareItemToBodyRs(data, responseGet, true)
	diags := resp.State.Set(ctx, &data)
	//update path params assigned
	resp.Diagnostics.Append(diags...)
}
func (r *NetworksApplianceSecurityMalwareResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("network_id"), req.ID)...)
}

func (r *NetworksApplianceSecurityMalwareResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data NetworksApplianceSecurityMalwareRs
	merge(ctx, req, resp, &data)

	if resp.Diagnostics.HasError() {
		return
	}
	//Has Paths
	//Update

	//Path Params
	vvNetworkID := data.NetworkID.ValueString()
	dataRequest := data.toSdkApiRequestUpdate(ctx)
	response, restyResp2, err := r.client.Appliance.UpdateNetworkApplianceSecurityMalware(vvNetworkID, dataRequest)
	if err != nil || restyResp2 == nil || response == nil {
		if restyResp2 != nil {
			resp.Diagnostics.AddError(
				"Failure when executing UpdateNetworkApplianceSecurityMalware",
				err.Error(),
			)
			return
		}
		resp.Diagnostics.AddError(
			"Failure when executing UpdateNetworkApplianceSecurityMalware",
			err.Error(),
		)
		return
	}
	resp.Diagnostics.Append(req.Plan.Set(ctx, &data)...)
	diags := resp.State.Set(ctx, &data)
	resp.Diagnostics.Append(diags...)
}

func (r *NetworksApplianceSecurityMalwareResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	//missing delete
	resp.Diagnostics.AddWarning("Error deleting NetworksApplianceSecurityMalware", "This resource has no delete method in the meraki lab, the resource was deleted only in terraform.")
	resp.State.RemoveResource(ctx)
}

// TF Structs Schema
type NetworksApplianceSecurityMalwareRs struct {
	NetworkID    types.String                                                         `tfsdk:"network_id"`
	AllowedFiles *[]ResponseApplianceGetNetworkApplianceSecurityMalwareAllowedFilesRs `tfsdk:"allowed_files"`
	AllowedURLs  *[]ResponseApplianceGetNetworkApplianceSecurityMalwareAllowedUrlsRs  `tfsdk:"allowed_urls"`
	Mode         types.String                                                         `tfsdk:"mode"`
}

type ResponseApplianceGetNetworkApplianceSecurityMalwareAllowedFilesRs struct {
	Comment types.String `tfsdk:"comment"`
	Sha256  types.String `tfsdk:"sha256"`
}

type ResponseApplianceGetNetworkApplianceSecurityMalwareAllowedUrlsRs struct {
	Comment types.String `tfsdk:"comment"`
	URL     types.String `tfsdk:"url"`
}

// FromBody
func (r *NetworksApplianceSecurityMalwareRs) toSdkApiRequestUpdate(ctx context.Context) *merakigosdk.RequestApplianceUpdateNetworkApplianceSecurityMalware {
	emptyString := ""
	var requestApplianceUpdateNetworkApplianceSecurityMalwareAllowedFiles []merakigosdk.RequestApplianceUpdateNetworkApplianceSecurityMalwareAllowedFiles
	if r.AllowedFiles != nil {
		for _, rItem1 := range *r.AllowedFiles {
			comment := rItem1.Comment.ValueString()
			sha256 := rItem1.Sha256.ValueString()
			requestApplianceUpdateNetworkApplianceSecurityMalwareAllowedFiles = append(requestApplianceUpdateNetworkApplianceSecurityMalwareAllowedFiles, merakigosdk.RequestApplianceUpdateNetworkApplianceSecurityMalwareAllowedFiles{
				Comment: comment,
				Sha256:  sha256,
			})
		}
	}
	var requestApplianceUpdateNetworkApplianceSecurityMalwareAllowedURLs []merakigosdk.RequestApplianceUpdateNetworkApplianceSecurityMalwareAllowedURLs
	if r.AllowedURLs != nil {
		for _, rItem1 := range *r.AllowedURLs {
			comment := rItem1.Comment.ValueString()
			uRL := rItem1.URL.ValueString()
			requestApplianceUpdateNetworkApplianceSecurityMalwareAllowedURLs = append(requestApplianceUpdateNetworkApplianceSecurityMalwareAllowedURLs, merakigosdk.RequestApplianceUpdateNetworkApplianceSecurityMalwareAllowedURLs{
				Comment: comment,
				URL:     uRL,
			})
		}
	}
	mode := new(string)
	if !r.Mode.IsUnknown() && !r.Mode.IsNull() {
		*mode = r.Mode.ValueString()
	} else {
		mode = &emptyString
	}
	out := merakigosdk.RequestApplianceUpdateNetworkApplianceSecurityMalware{
		AllowedFiles: func() *[]merakigosdk.RequestApplianceUpdateNetworkApplianceSecurityMalwareAllowedFiles {
			if len(requestApplianceUpdateNetworkApplianceSecurityMalwareAllowedFiles) > 0 {
				return &requestApplianceUpdateNetworkApplianceSecurityMalwareAllowedFiles
			}
			return nil
		}(),
		AllowedURLs: func() *[]merakigosdk.RequestApplianceUpdateNetworkApplianceSecurityMalwareAllowedURLs {
			if len(requestApplianceUpdateNetworkApplianceSecurityMalwareAllowedURLs) > 0 {
				return &requestApplianceUpdateNetworkApplianceSecurityMalwareAllowedURLs
			}
			return nil
		}(),
		Mode: *mode,
	}
	return &out
}

// From gosdk to TF Structs Schema
func ResponseApplianceGetNetworkApplianceSecurityMalwareItemToBodyRs(state NetworksApplianceSecurityMalwareRs, response *merakigosdk.ResponseApplianceGetNetworkApplianceSecurityMalware, is_read bool) NetworksApplianceSecurityMalwareRs {
	itemState := NetworksApplianceSecurityMalwareRs{
		AllowedFiles: func() *[]ResponseApplianceGetNetworkApplianceSecurityMalwareAllowedFilesRs {
			if response.AllowedFiles != nil {
				result := make([]ResponseApplianceGetNetworkApplianceSecurityMalwareAllowedFilesRs, len(*response.AllowedFiles))
				for i, allowedFiles := range *response.AllowedFiles {
					result[i] = ResponseApplianceGetNetworkApplianceSecurityMalwareAllowedFilesRs{
						Comment: types.StringValue(allowedFiles.Comment),
						Sha256:  types.StringValue(allowedFiles.Sha256),
					}
				}
				return &result
			}
			return &[]ResponseApplianceGetNetworkApplianceSecurityMalwareAllowedFilesRs{}
		}(),
		AllowedURLs: func() *[]ResponseApplianceGetNetworkApplianceSecurityMalwareAllowedUrlsRs {
			if response.AllowedURLs != nil {
				result := make([]ResponseApplianceGetNetworkApplianceSecurityMalwareAllowedUrlsRs, len(*response.AllowedURLs))
				for i, allowedURLs := range *response.AllowedURLs {
					result[i] = ResponseApplianceGetNetworkApplianceSecurityMalwareAllowedUrlsRs{
						Comment: types.StringValue(allowedURLs.Comment),
						URL:     types.StringValue(allowedURLs.URL),
					}
				}
				return &result
			}
			return &[]ResponseApplianceGetNetworkApplianceSecurityMalwareAllowedUrlsRs{}
		}(),
		Mode: types.StringValue(response.Mode),
	}
	if is_read {
		return mergeInterfacesOnlyPath(state, itemState).(NetworksApplianceSecurityMalwareRs)
	}
	return mergeInterfaces(state, itemState, true).(NetworksApplianceSecurityMalwareRs)
}
